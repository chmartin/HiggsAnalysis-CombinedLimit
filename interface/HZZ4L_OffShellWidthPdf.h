/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef HZZ4L_OFFSHELLWIDTHPDF
#define HZZ4L_OFFSHELLWIDTHPDF

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include "TH2F.h"

 
class HZZ4L_OffShellWidthPdf : public RooAbsPdf {
public:
  HZZ4L_OffShellWidthPdf() {} ; 
  HZZ4L_OffShellWidthPdf(const char *name, const char *title, 
						 RooAbsReal& _mass,
						 RooAbsReal& _widthKD,
						 RooAbsReal& _Gamma,
			                         RooAbsReal& _r,
						 TH2F *_histoBkg,
						 TH2F *_histoSig,
						 TH2F *_histoInterf);
		    
  HZZ4L_OffShellWidthPdf(const HZZ4L_OffShellWidthPdf& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new HZZ4L_OffShellWidthPdf(*this,newname); }
  inline virtual ~HZZ4L_OffShellWidthPdf() { }
  
  Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const ;
  Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const ;
  
	
protected:

  RooRealProxy mass ;
  RooRealProxy widthKD ;
  RooRealProxy Gamma ;
  RooRealProxy r ;
  TH2F* histoBkg;
  TH2F* histoSig;
  TH2F* histoInterf;
  
    
  Double_t evaluate() const ;

private:

  ClassDef(HZZ4L_OffShellWidthPdf,1) // Your description goes here...
};
 
#endif
