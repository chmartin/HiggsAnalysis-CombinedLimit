/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef HZZ4L_OFFSHELLWIDTHPDF
#define HZZ4L_OFFSHELLWIDTHPDF

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include "RooDataHist.h"
#include "RooHistFunc.h"
#include "TIterator.h"
using namespace RooFit;
 
class HZZ4L_OffShellWidthPdf : public RooAbsPdf {
protected:

  RooRealProxy mass ;
  RooRealProxy widthKD ;
  RooRealProxy Gamma ;
  RooRealProxy mu ;
  RooRealProxy kbkg;
  RooListProxy _histList ;
  TIterator* _histIter ;
  Double_t evaluate() const ;
public:
  HZZ4L_OffShellWidthPdf() {} ; 
  HZZ4L_OffShellWidthPdf(const char *name, const char *title,
			 RooAbsReal& _mass,
			 RooAbsReal& _widthKD,
			 RooAbsReal& _Gamma,
			 RooAbsReal& _mu,
			 RooAbsReal& _kbkg,
			 const RooArgList& inHistList);
		    
  HZZ4L_OffShellWidthPdf(const HZZ4L_OffShellWidthPdf& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new HZZ4L_OffShellWidthPdf(*this,newname); }
  inline virtual ~HZZ4L_OffShellWidthPdf() {}
  
  Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const ;
  Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const ;
  const RooArgList& histList() const { return _histList ; }

private:
  ClassDef(HZZ4L_OffShellWidthPdf,1) // Your description goes here...
};
 
#endif
